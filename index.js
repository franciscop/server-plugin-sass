const { get } = require("server/router");
const { type, send } = require("server/reply");
const sass = require("node-sass");
const path = require("path");
const fs = require("mz/fs");
const { promisify } = require("util");

// Async renderer
const renderSass = promisify(sass.render);
const render = async opts => {
  const text = await renderSass(opts);
  return "/* @server/sass */\n" + text.css.toString();
};

// Check whether a path is absolute or not
const absolute = value => path.isAbsolute(value);

// The text for the file already exists
const fileExists = name => `
There is already a file called ${name} that was not created by @server/sass.
Make sure to remove or rename this file, since @server/sass uses this file to put the
compiled CSS from the SASS/SCSS.
`;

// Render a CSS file
const renderFile = async (file, destination, outputStyle = "compressed") => {
  const css = await render({ file, outputStyle });
  await fs.writeFile(destination, css, "utf8");
};

const removeFile = async path => {
  if (await fs.exists(path)) {
    // Throw if this file was not autogenerated
    if (!/\/\* @server\/sass/.test(await fs.readFile(path))) {
      throw new Error(fileExists(path));
    }

    await fs.unlink(path);
  }
};

module.exports = {
  name: "sass",
  options: {
    __root: "source",
    source: {
      default: "style/style.scss",
      clean: value =>
        absolute(value) ? value : path.join(process.cwd(), value)
    }
  },

  // Write the file in the right place
  init: async ctx => {
    // Generate the path within the public folder
    const toPublic = file => path.join(ctx.options.public, file);
    const source = ctx.options.sass.source;

    // Delete the files for any environment on startup
    await Promise.all([
      removeFile(toPublic("style.css")),
      removeFile(toPublic("style.min.css"))
    ]);

    // In production, write it to the public path so that the next requests
    // hit the public folder straight away without going through middleware
    if (ctx.options.env === "production") {
      await Promise.all([
        renderFile(source, toPublic("style.css"), "expanded"),
        renderFile(source, toPublic("style.min.css"), "compressed")
      ]);
    }
  },

  before: [
    get("/style.css", async ctx => {
      // Create the css with the options
      const file = ctx.options.sass.source;
      const css = await render({ file, outputStyle: "expanded" });

      // Send the css with the right type
      return type("text/css").send(css);
    }),

    get("/style.min.css", async ctx => {
      // Create the css with the options
      const file = ctx.options.sass.source;
      const css = await render({ file, outputStyle: "compressed" });

      // Send the css with the right type
      return type("text/css").send(css);
    })
  ]
};
